#if ! defined( LISTA_ )
#define LISTA_
/***************************************************************************
*  $MCI MÛdulo de implementaÁ„o: CAR Carta
*
*  Arquivo gerado:              Carta.c
*  Letras identificadoras:      CAR
*
*
*  Projeto: Disciplinas INF 1301
*  Professor: Flavio
*  Autores: ds  - Daniel Siles
*			fh  - Fernando Homem
*			mr - Mateus Ribeiro
*
*
*  $HA HistÛrico de evoluÁ„o:
*     Vers„o  Autor     Data       ObservaÁıes
*		5.00  ds/fh/mr 27/04/2015  atribuiÁ„o de condiÁıes de retorno para as funÁıes do mÛdulo
*		4.00	avs    01/02/2006  criar linguagem script simbÛlica
*		3.00	avs    08/12/2004  uniformizaÁ„o dos exemplos
*		2.00	avs    07/07/2003  unificaÁ„o de todos os mÛdulos em um sÛ projeto
*		1.00	avs    16/04/2003  inÌcio desenvolvimento
*
*  $ED DescriÁ„o do mÛdulo
*     Implementa listas genÈricas duplamente encadeadas.
*     Podem existir n listas em operaÁ„o simultaneamente.
*     As listas possuem uma cabe√Åa encapsulando o seu estado.
*
*     Cada lista È homogÍnea quanto ao tipo dos dados que armazena.
*     Cada elemento da lista referencia o valor que contÈm.
*
*     Os ponteiros para os dados s‚Äûo copiados para elementos da lista.
*        N‚Äûo √à copiado o valor apontado por estes ponteiros.
*
*     O controle da destrui√Å‚Äûo do valor de um elemento a ser exclu√ådo
*        √à realizado por uma fun√Å‚Äûo fornecida pelo usu¬∑rio.
*
*     Cada lista referencia uma fun√Å‚Äûo que determina como devem ser
*        desalocados os dados nela contidos.
*
*     A fun√Å‚Äûo de libera√Å‚Äûo dos valores contidos nos elementos deve
*        assegurar a libera√Å‚Äûo de todos os espa√Åos refer√çnciados pelo
*        valor contido em um elemento.
*        Esta fun√Å‚Äûo √à chamada antes de se desalocar um elemento
*        de uma lista.
*        Caso n‚Äûo seja necess¬∑rio desalocar o valor referenciado pelo
*        elemento, o ponteiro para a fun√Å‚Äûo de libera√Å‚Äûo poder¬∑ ser NULL .
*        Caso o elemento da lista seja a Àônica ‚Äöncora do valor referenciado,
*        esta fun√Å‚Äûo deve promover a destrui√Å‚Äûo (free) desse valor e
*        de todos os dados nele ancorados.
*
***************************************************************************/

#if defined( LISTA_OWN )
#define LISTA_EXT
#else
#define LISTA_EXT extern
#endif

/***** Declara√Åƒ±es exportadas pelo m√õdulo *****/

/* Tipo refer√çncia para uma lista */

typedef struct LIS_tagLista * LIS_tppLista;


/***********************************************************************
*
*  $TC Tipo de dados: LIS Condi√Åƒ±es de retorno
*
*
*  $ED Descri√Å‚Äûo do tipo
*     Condi√Åƒ±es de retorno das fun√Åƒ±es da lista
*
***********************************************************************/

typedef enum {

	LIS_CondRetOK,
	/* Concluiu corretamente */

	LIS_CondRetListaVazia,
	/* A lista n‚Äûo cont√àm elementos */

	LIS_CondRetFimLista,
	/* Foi atingido o fim de lista */

	LIS_CondRetNaoAchou,
	/* N‚Äûo encontrou o valor procurado */

	LIS_CondRetFaltouMemoria,
	/* Faltou mem√õria ao tentar criar um elemento de lista */

	LIS_CondRetListaNaoExiste,
	/* A lista n√£o existe */


} LIS_tpCondRet;


/***********************************************************************
*
*  $FC Fun√Å‚Äûo: LIS  &Criar lista
*
*  $ED Descri√Å‚Äûo da fun√Å‚Äûo
*     Cria uma lista gen√àrica duplamente encadeada.
*     Os poss√åveis tipos s‚Äûo desconhecidos a priori.
*     A tipagem √à implicita.
*     N‚Äûo existe identificador de tipo associado ‚Ä° lista.
*
*  $EP Par‚Äömetros
*     $P pLista         - ponteiro para a lista a ser criada.
*     $PExcluirValor    - ponteiro para a fun√Å‚Äûo que processa a
*                       exclus‚Äûo do valor referenciado pelo elemento
*                       a ser exclu√ådo.
*                       Ver descri√Å‚Äûo do m√õdulo.
*
*  $FV Valor retornado
*     LIS_CondRetOK             - se executou ok.
*     LIS_CondRetFaltouMemoria  - se faltou mem√≥ria ao tentar alocar espa√ßo.
*
***********************************************************************/

LIS_tpCondRet LIS_CriarLista(LIS_tppLista * pLista,
	void(*ExcluirValor) (void * pDado));


/***********************************************************************
*
*  $FC Fun√Å‚Äûo: LIS  &Destruir lista
*
*  $ED Descri√Å‚Äûo da fun√Å‚Äûo
*     Destr√õi a lista fornecida.
*     O par‚Äömetro ponteiro para a lista n‚Äûo √à modificado.
*     Se ocorrer algum erro durante a destrui√Å‚Äûo, a lista resultar¬∑
*     estruturalmente incorreta.
*     OBS. n‚Äûo existe previs‚Äûo para poss√åveis falhas de execu√Å‚Äûo.
*
*  $EP Par√¢metros
*     $P pLista - ponteiro para a lista a ser destru√≠da.
*
*  $FV Valor retornado
*     LIS_CondRetOK             - destruiu ok.
*     LIS_CondRetListaNaoExiste - se a lista a ser destru√≠da n√£o existe.
*
***********************************************************************/

LIS_tpCondRet LIS_DestruirLista(LIS_tppLista pLista);


/***********************************************************************
*
*  $FC Fun√Å‚Äûo: LIS  &Esvaziar lista
*
*  $ED Descri√Å‚Äûo da fun√Å‚Äûo
*     Elimina todos os elementos, sem contudo eliminar a lista
*
*  $EP Par‚Äömetros
*     pLista - ponteiro para a lista a ser esvaziada
*
*  $FV Valor retornado
*     LIS_CondRetOK             - se esvaziou ok.
*     LIS_CondRetListaNaoExiste - se a lista a ser esvaziada n√£o existe.
*
***********************************************************************/

LIS_tpCondRet LIS_EsvaziarLista(LIS_tppLista pLista);


/***********************************************************************
*
*  $FC Fun√Å‚Äûo: LIS  &Inserir elemento antes
*
*  $ED Descri√Å‚Äûo da fun√Å‚Äûo
*     Insere novo elemento antes do elemento corrente.
*     Caso a lista esteja vazia, insere o primeiro elemento da lista.
*
*  $EP Par‚Äömetros
*     pLista - ponteiro para a lista onde deve ser inserido o elemento
*     pValor - ponteiro para o valor do novo elemento
*              Pode ser NULL
*
*  $FV Valor retornado
*     LIS_CondRetOK
*     LIS_CondRetFaltouMemoria
*
***********************************************************************/

LIS_tpCondRet LIS_InserirElementoAntes(LIS_tppLista pLista,
	void * pValor);


/***********************************************************************
*
*  $FC Fun√Å‚Äûo: LIS  &Inserir elemento ap√õs
*
*  $ED Descri√Å‚Äûo da fun√Å‚Äûo
*     Insere novo elemento ap¬∑s o elemento corrente.
*     Caso a lista esteja vazia, insere o primeiro elemento da lista.
*
*  $EP Par‚Äömetros
*     Par‚Äömetros
*        pLista - ponteiro para a lista onde deve ser inserido o elemento
*        pValor - ponteiro para o valor do novo elemento
*                 Pode ser NULL
*
*
*  $FV Valor retornado
*     Valor retornado
*        LIS_CondRetOK
*        LIS_CondRetFaltouMemoria
*
***********************************************************************/

LIS_tpCondRet LIS_InserirElementoApos(LIS_tppLista pLista,
	void * pValor)
	;


/***********************************************************************
*
*  $FC Fun√Å‚Äûo: LIS  &Excluir elemento
*
*  $ED Descri√Å‚Äûo da fun√Å‚Äûo
*     Exclui o elemento corrente da lista dada.
*     Se existir o elemento aa esquerda do corrente ser¬∑ o novo corrente.
*     Se n‚Äûo existir e existir o elemento ‚Ä° direita, este se tornar¬∑ corrente.
*     Se este tamb√àm n‚Äûo existir a lista tornou-se vazia.
*
*  $EP Par‚Äömetros
*     pLista    - ponteiro para a lista na qual deve excluir.
*
*  $FV Valor retornado
*     LIS_CondRetOK
*     LIS_CondRetListaVazia
*
***********************************************************************/

LIS_tpCondRet LIS_ExcluirElemento(LIS_tppLista pLista);


/***********************************************************************
*
*  $FC Fun√Å‚Äûo: LIS  &Obter refer√çncia para o valor contido no elemento
*
*  $ED Descri√Å‚Äûo da fun√Å‚Äûo
*     Obtem a refer√çncia para o valor contido no elemento corrente da lista
*
*  $EP Par‚Äömetros
*     pLista - ponteiro para a lista de onde se quer o valor
*     pValor - ponteiro que receber√° a refer√™ncia para o valor contido no elemento.
*
*  $FV Valor retornado
*     LIS_CondRetOK             - se o valor foi passado ok.
*     LIS_CondRetListaNaoExiste - se a lista passada n√£o existe.
*     LIS_CondRetListaVazia     - se a lista est√° vazia.
*
***********************************************************************/

LIS_tpCondRet LIS_ObterValor(LIS_tppLista pLista, void ** pValor);


/***********************************************************************
*
*  $FC Fun√Å‚Äûo: LIS  &Ir para o elemento inicial
*
*  $ED Descri√Å‚Äûo da fun√Å‚Äûo
*     Torna corrente o primeiro elemento da lista.
*     Faz nada se a lista est¬∑ vazia.
*
*  $EP Par‚Äömetros
*     pLista - ponteiro para a lista a manipular
*
*  $FV Valor retornado
*     LIS_CondRetOK             - se foi para o √≠nicio ok.
*     LIS_CondRetListaNaoExiste - se a lista n√£o existe.
*     LIS_CondRetListaVazia     - se a lista est√° vazia.
*
***********************************************************************/

LIS_tpCondRet LIS_IrInicioLista(LIS_tppLista pLista);


/***********************************************************************
*
*  $FC Fun√Å‚Äûo: LIS  &Ir para o elemento final
*
*  $ED Descri√Å‚Äûo da fun√Å‚Äûo
*     Torna corrente o elemento final da lista.
*     Faz nada se a lista est¬∑ vazia.
*
*  $EP Par‚Äömetros
*     pLista - ponteiro para a lista a manipular
*
*  $FV Valor retornado
*     LIS_CondRetOK             - se foi para o final ok.
*     LIS_CondRetListaNaoExiste - se a lista n√£o existe.
*     LIS_CondRetListaVazia     - se a lista est√° vazia.
*
***********************************************************************/

LIS_tpCondRet LIS_IrFinalLista(LIS_tppLista pLista);


/***********************************************************************
*
*  $FC Fun√Å‚Äûo: LIS  &Avan√Åar elemento
*
*  $ED Descri√Å‚Äûo da fun√Å‚Äûo
*     Avan√Åa o elemento corrente numElem elementos na lista
*     Se numElem for positivo avan√Åa em dire√Å‚Äûo ao final
*     Se numElem for negativo avan√Åa em dire√Å‚Äûo ao in√åcio
*     numElem pode ser maior do que o nÀômro de elementos existentes na
*               dire√Å‚Äûo desejada
*     Se numElem for zero somente verifica se a lista est¬∑ vazia
*
*  $EP Par‚Äömetros
*     pLista  - ponteiro para a lista a ser manipulada
*     numElem - o nÀômero de elementos a andar
*
*  $FV Valor retornado
*     CondRetOK         - se numElem elementos tiverem sido andados
*     CondRetFimLista   - se encontrou o fim da lista antes de andar numElem
*                         elementos
*     CondRetListaVazia - se a lista est¬∑ vazia
*
***********************************************************************/


LIS_tpCondRet LIS_AvancarElementoCorrente(LIS_tppLista pLista,
	int numElem);

/***********************************************************************
*
*  $FC Fun√Å‚Äûo: LIS  Retorna n˙mero de elementos
*
*  $ED Descri√Å‚Äûo da fun√Å‚Äûo
*     A funÁ„o recebe uma Lista e devolve por referÍncia o n˙mero de elementos dela.
*
*  $EP Par‚Äömetros
*     pLista  - ponteiro para a lista a ser verificado o n˙mero de elementos
*
*  $FV Valor retornado
*     LIS_CondRetOK  - se conseguir retornar o n˙mero de elementos
*     LIS_CondRetListaVazia   - se a lista estiver vazia
*
***********************************************************************/
LIS_tpCondRet LIS_retornaNumElementos(LIS_tppLista pLista, int *Num);

/***********************************************************************
*
*  $FC Fun√Å‚Äûo: LIS  &Procurar elemento contendo valor
*
*  $ED Descri√Å‚Äûo da fun√Å‚Äûo
*     Procura o elemento que referencia o valor dado.
*     A fun√Å‚Äûo compara ponteiro e n‚Äûo conteÀôdo apontado.
*
*  $EP Par‚Äömetros
*     pLista  - ponteiro para a lista onde procura
*     pValor  - ponteiro para o valor procurado
*               Pode ser NULL
*
*  $FV Valor retornado
*     LIS_CondRetOK  - se encontrou.
*                      O elemento corrente √à o primeiro elemento do
*                      elemento corrente inclusive para o fim da lista
*                      e que cont√àm o ponteiro procurado
*
*     LIS_CondRetNaoEncontrou - se o ponteiro n‚Äûo foi encontrado
*                      O elemento corrente continua o mesmo
*     LIS_CondRetListaVazia   - se a lista estiver vazia
*
***********************************************************************/


LIS_tpCondRet LIS_ProcurarValor(LIS_tppLista pLista,
	void * pValor);

#undef LISTA_EXT

/********** Fim do m√õdulo de defini√Å‚Äûo: LIS  Lista duplamente encadeada **********/

#else
#endif